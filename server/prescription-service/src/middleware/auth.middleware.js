import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
dotenv.config();

const JWT_SECRET = process.env.JWT_SECRET || 'super-secret-key';

/**
 * X√°c th·ª±c JWT t·ª´ Authorization header
 */
export const authMiddleware = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer '))
    return res.status(401).json({ message: 'Thi·∫øu ho·∫∑c sai token' });

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded; // { id, role, iat, exp }
    console.log('[auth] user from token:', req.user); // üëà ki·ªÉm tra ·ªü console
    next();
  } catch (err) {
    res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });
  }
};

/*// ‚úÖ Ph√¢n quy·ªÅn theo vai tr√≤
export const authorizeRoles = (...roles) => {
  return (req, res, next) => {
    if (!req.user || !roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'C·∫•m truy c·∫≠p: B·∫°n kh√¥ng c√≥ quy·ªÅn.' });
    }
    next();
  };
};*/
export const authorizeRoles = (...roles) => {
  // chu·∫©n h√≥a danh s√°ch role cho ph√©p
  const allowed = roles.map(r => String(r).toLowerCase().trim());

  return (req, res, next) => {
    const userRole = String(req.user?.role ?? '').toLowerCase().trim();
    if (!userRole || !allowed.includes(userRole)) {
      return res.status(403).json({
        message: `C·∫•m truy c·∫≠p: c·∫ßn role [${allowed.join(', ')}], nh∆∞ng token c√≥ role='${req.user?.role ?? ''}'`
      });
    }
    next();
  };
};
